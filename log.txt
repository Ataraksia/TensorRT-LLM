curl_perform_with_retry: HEAD https://huggingface.co/Qwen/Qwen3-Embedding-4B-GGUF/resolve/main/Qwen3-Embedding-4B-Q4_K_M.gguf (attempt 1 of 1)...
common_download_file_single: using cached file: /home/me/.cache/llama.cpp/Qwen_Qwen3-Embedding-4B-GGUF_Qwen3-Embedding-4B-Q4_K_M.gguf
build: 6301 (da54f9f1a) with cc (GCC) 14.2.1 20250207 for x86_64-pc-linux-gnu
system info: n_threads = 16, n_threads_batch = 16, total_threads = 32

system_info: n_threads = 16 (n_threads_batch = 16) / 32 | CPU : OPENMP = 1 | REPACK = 1 | 

main: binding port with default address family
main: HTTP server is listening, hostname: 127.0.0.1, port: 8080, http threads: 31
main: loading model
srv    load_model: loading model '/home/me/.cache/llama.cpp/Qwen_Qwen3-Embedding-4B-GGUF_Qwen3-Embedding-4B-Q4_K_M.gguf'
llama_model_loader: loaded meta data with 36 key-value pairs and 398 tensors from /home/me/.cache/llama.cpp/Qwen_Qwen3-Embedding-4B-GGUF_Qwen3-Embedding-4B-Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = qwen3
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Qwen3 Embedding 4B
llama_model_loader: - kv   3:                           general.basename str              = Qwen3-Embedding
llama_model_loader: - kv   4:                         general.size_label str              = 4B
llama_model_loader: - kv   5:                            general.license str              = apache-2.0
llama_model_loader: - kv   6:                   general.base_model.count u32              = 1
llama_model_loader: - kv   7:                  general.base_model.0.name str              = Qwen3 4B Base
llama_model_loader: - kv   8:          general.base_model.0.organization str              = Qwen
llama_model_loader: - kv   9:              general.base_model.0.repo_url str              = https://huggingface.co/Qwen/Qwen3-4B-...
llama_model_loader: - kv  10:                               general.tags arr[str,5]       = ["transformers", "sentence-transforme...
llama_model_loader: - kv  11:                          qwen3.block_count u32              = 36
llama_model_loader: - kv  12:                       qwen3.context_length u32              = 40960
llama_model_loader: - kv  13:                     qwen3.embedding_length u32              = 2560
llama_model_loader: - kv  14:                  qwen3.feed_forward_length u32              = 9728
llama_model_loader: - kv  15:                 qwen3.attention.head_count u32              = 32
llama_model_loader: - kv  16:              qwen3.attention.head_count_kv u32              = 8
llama_model_loader: - kv  17:                       qwen3.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  18:     qwen3.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  19:                 qwen3.attention.key_length u32              = 128
llama_model_loader: - kv  20:               qwen3.attention.value_length u32              = 128
llama_model_loader: - kv  21:                         qwen3.pooling_type u32              = 3
llama_model_loader: - kv  22:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  23:                         tokenizer.ggml.pre str              = qwen2
llama_model_loader: - kv  24:                      tokenizer.ggml.tokens arr[str,151665]  = ["!", "\"", "#", "$", "%", "&", "'", ...
llama_model_loader: - kv  25:                  tokenizer.ggml.token_type arr[i32,151665]  = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  26:                      tokenizer.ggml.merges arr[str,151387]  = ["Ä  Ä ", "Ä Ä  Ä Ä ", "i n", "Ä  t",...
llama_model_loader: - kv  27:                tokenizer.ggml.eos_token_id u32              = 151643
llama_model_loader: - kv  28:            tokenizer.ggml.padding_token_id u32              = 151643
llama_model_loader: - kv  29:                tokenizer.ggml.eot_token_id u32              = 151645
llama_model_loader: - kv  30:                tokenizer.ggml.bos_token_id u32              = 151643
llama_model_loader: - kv  31:               tokenizer.ggml.add_eos_token bool             = true
llama_model_loader: - kv  32:               tokenizer.ggml.add_bos_token bool             = false
llama_model_loader: - kv  33:                    tokenizer.chat_template str              = {%- if tools %}\n    {{- '<|im_start|>...
llama_model_loader: - kv  34:               general.quantization_version u32              = 2
llama_model_loader: - kv  35:                          general.file_type u32              = 15
llama_model_loader: - type  f32:  145 tensors
llama_model_loader: - type q4_K:  216 tensors
llama_model_loader: - type q6_K:   37 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 2.32 GiB (4.95 BPW) 
init_tokenizer: initializing tokenizer for type 2
[0mload: control token: 151660 '<|fim_middle|>' is not marked as EOG
[0mload: control token: 151659 '<|fim_prefix|>' is not marked as EOG
[0mload: control token: 151653 '<|vision_end|>' is not marked as EOG
[0mload: control token: 151648 '<|box_start|>' is not marked as EOG
[0mload: control token: 151646 '<|object_ref_start|>' is not marked as EOG
[0mload: control token: 151649 '<|box_end|>' is not marked as EOG
[0mload: control token: 151655 '<|image_pad|>' is not marked as EOG
[0mload: control token: 151651 '<|quad_end|>' is not marked as EOG
[0mload: control token: 151647 '<|object_ref_end|>' is not marked as EOG
[0mload: control token: 151652 '<|vision_start|>' is not marked as EOG
[0mload: control token: 151654 '<|vision_pad|>' is not marked as EOG
[0mload: control token: 151656 '<|video_pad|>' is not marked as EOG
[0mload: control token: 151644 '<|im_start|>' is not marked as EOG
[0mload: control token: 151661 '<|fim_suffix|>' is not marked as EOG
[0mload: control token: 151650 '<|quad_start|>' is not marked as EOG
[0mload: printing all EOG tokens:
load:   - 151643 ('<|endoftext|>')
load:   - 151645 ('<|im_end|>')
load:   - 151662 ('<|fim_pad|>')
load:   - 151663 ('<|repo_name|>')
load:   - 151664 ('<|file_sep|>')
load: special tokens cache size = 22
load: token to piece cache size = 0.9310 MB
print_info: arch             = qwen3
print_info: vocab_only       = 0
print_info: n_ctx_train      = 40960
print_info: n_embd           = 2560
print_info: n_layer          = 36
print_info: n_head           = 32
print_info: n_head_kv        = 8
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 4
print_info: n_embd_k_gqa     = 1024
print_info: n_embd_v_gqa     = 1024
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-06
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 9728
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 3
print_info: rope type        = 2
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 40960
print_info: rope_finetuned   = unknown
print_info: model type       = 4B
print_info: model params     = 4.02 B
print_info: general.name     = Qwen3 Embedding 4B
print_info: vocab type       = BPE
print_info: n_vocab          = 151665
print_info: n_merges         = 151387
print_info: BOS token        = 151643 '<|endoftext|>'
print_info: EOS token        = 151643 '<|endoftext|>'
print_info: EOT token        = 151645 '<|im_end|>'
print_info: PAD token        = 151643 '<|endoftext|>'
print_info: LF token         = 198 'ÄŠ'
print_info: FIM PRE token    = 151659 '<|fim_prefix|>'
print_info: FIM SUF token    = 151661 '<|fim_suffix|>'
print_info: FIM MID token    = 151660 '<|fim_middle|>'
print_info: FIM PAD token    = 151662 '<|fim_pad|>'
print_info: FIM REP token    = 151663 '<|repo_name|>'
print_info: FIM SEP token    = 151664 '<|file_sep|>'
print_info: EOG token        = 151643 '<|endoftext|>'
print_info: EOG token        = 151645 '<|im_end|>'
print_info: EOG token        = 151662 '<|fim_pad|>'
print_info: EOG token        = 151663 '<|repo_name|>'
print_info: EOG token        = 151664 '<|file_sep|>'
print_info: max token length = 256
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   1 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   2 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   3 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   4 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   5 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   6 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   7 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   8 assigned to device CPU, is_swa = 0
[0mload_tensors: layer   9 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  10 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  11 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  12 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  13 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  14 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  15 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  16 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  17 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  18 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  19 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  20 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  21 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  22 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  23 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  24 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  25 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  26 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  27 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  28 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  29 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  30 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  31 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  32 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  33 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  34 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  35 assigned to device CPU, is_swa = 0
[0mload_tensors: layer  36 assigned to device CPU, is_swa = 0
[0mload_tensors: tensor 'token_embd.weight' (q6_K) (and 398 others) cannot be used with preferred buffer type CPU_REPACK, using CPU instead
[0mload_tensors:   CPU_Mapped model buffer size =  2375.37 MiB
.........................................................................................
llama_context: constructing llama_context
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 4096
llama_context: n_ctx_per_seq = 4096
llama_context: n_batch       = 2048
llama_context: n_ubatch      = 2048
llama_context: causal_attn   = 1
llama_context: flash_attn    = 1
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (4096) < n_ctx_train (40960) -- the full capacity of the model will not be utilized
[0mset_abort_callback: call
[0mllama_context:        CPU  output buffer size =     0.59 MiB
create_memory: n_ctx = 4096 (padded)
[0mllama_kv_cache: layer   0: dev = CPU
[0mllama_kv_cache: layer   1: dev = CPU
[0mllama_kv_cache: layer   2: dev = CPU
[0mllama_kv_cache: layer   3: dev = CPU
[0mllama_kv_cache: layer   4: dev = CPU
[0mllama_kv_cache: layer   5: dev = CPU
[0mllama_kv_cache: layer   6: dev = CPU
[0mllama_kv_cache: layer   7: dev = CPU
[0mllama_kv_cache: layer   8: dev = CPU
[0mllama_kv_cache: layer   9: dev = CPU
[0mllama_kv_cache: layer  10: dev = CPU
[0mllama_kv_cache: layer  11: dev = CPU
[0mllama_kv_cache: layer  12: dev = CPU
[0mllama_kv_cache: layer  13: dev = CPU
[0mllama_kv_cache: layer  14: dev = CPU
[0mllama_kv_cache: layer  15: dev = CPU
[0mllama_kv_cache: layer  16: dev = CPU
[0mllama_kv_cache: layer  17: dev = CPU
[0mllama_kv_cache: layer  18: dev = CPU
[0mllama_kv_cache: layer  19: dev = CPU
[0mllama_kv_cache: layer  20: dev = CPU
[0mllama_kv_cache: layer  21: dev = CPU
[0mllama_kv_cache: layer  22: dev = CPU
[0mllama_kv_cache: layer  23: dev = CPU
[0mllama_kv_cache: layer  24: dev = CPU
[0mllama_kv_cache: layer  25: dev = CPU
[0mllama_kv_cache: layer  26: dev = CPU
[0mllama_kv_cache: layer  27: dev = CPU
[0mllama_kv_cache: layer  28: dev = CPU
[0mllama_kv_cache: layer  29: dev = CPU
[0mllama_kv_cache: layer  30: dev = CPU
[0mllama_kv_cache: layer  31: dev = CPU
[0mllama_kv_cache: layer  32: dev = CPU
[0mllama_kv_cache: layer  33: dev = CPU
[0mllama_kv_cache: layer  34: dev = CPU
[0mllama_kv_cache: layer  35: dev = CPU
[0mllama_kv_cache:        CPU KV buffer size =   576.00 MiB
llama_kv_cache: size =  576.00 MiB (  4096 cells,  36 layers,  1/1 seqs), K (f16):  288.00 MiB, V (f16):  288.00 MiB
llama_context: enumerating backends
[0mllama_context: backend_ptrs.size() = 2
[0mllama_context: max_nodes = 3184
[0mllama_context: worst-case: n_tokens = 2048, n_seqs = 1, n_outputs = 0
[0mllama_context: reserving full memory module
[0mgraph_reserve: reserving a graph for ubatch with n_tokens = 2048, n_seqs =  1, n_outputs = 2048
[0mgraph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
[0mgraph_reserve: reserving a graph for ubatch with n_tokens = 2048, n_seqs =  1, n_outputs = 2048
[0mllama_context:        CPU compute buffer size =  1236.94 MiB
llama_context: graph nodes  = 1268
llama_context: graph splits = 435 (with bs=2048), 1 (with bs=1)
clear_adapter_lora: call
[0mcommon_init_from_params: added <|endoftext|> logit bias = -inf
common_init_from_params: added <|im_end|> logit bias = -inf
common_init_from_params: added <|fim_pad|> logit bias = -inf
common_init_from_params: added <|repo_name|> logit bias = -inf
common_init_from_params: added <|file_sep|> logit bias = -inf
common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0mset_warmup: value = 1
[0mset_warmup: value = 0
[0msrv          init: initializing slots, n_slots = 1
slot         init: id  0 | task -1 | new slot n_ctx_slot = 4096
main: model loaded
main: chat template, chat_template: {%- if tools %}
    {{- '<|im_start|>system\n' }}
    {%- if messages[0]['role'] == 'system' %}
        {{- messages[0]['content'] }}
    {%- else %}
        {{- 'You are a helpful assistant.' }}
    {%- endif %}
    {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }}
    {%- for tool in tools %}
        {{- "\n" }}
        {{- tool | tojson }}
    {%- endfor %}
    {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\"name\": <function-name>, \"arguments\": <args-json-object>}\n</tool_call><|im_end|>\n" }}
{%- else %}
    {%- if messages[0]['role'] == 'system' %}
        {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }}
    {%- else %}
        {{- '<|im_start|>system\nYou are a helpful assistant.<|im_end|>\n' }}
    {%- endif %}
{%- endif %}
{%- for message in messages %}
    {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
        {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>' + '\n' }}
    {%- elif message.role == "assistant" %}
        {{- '<|im_start|>' + message.role }}
        {%- if message.content %}
            {{- '\n' + message.content }}
        {%- endif %}
        {%- for tool_call in message.tool_calls %}
            {%- if tool_call.function is defined %}
                {%- set tool_call = tool_call.function %}
            {%- endif %}
            {{- '\n<tool_call>\n{"name": "' }}
            {{- tool_call.name }}
            {{- '", "arguments": ' }}
            {{- tool_call.arguments | tojson }}
            {{- '}\n</tool_call>' }}
        {%- endfor %}
        {{- '<|im_end|>\n' }}
    {%- elif message.role == "tool" %}
        {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
            {{- '<|im_start|>user' }}
        {%- endif %}
        {{- '\n<tool_response>\n' }}
        {{- message.content }}
        {{- '\n</tool_response>' }}
        {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
            {{- '<|im_end|>\n' }}
        {%- endif %}
    {%- endif %}
{%- endfor %}
{%- if add_generation_prompt %}
    {{- '<|im_start|>assistant\n' }}
{%- endif %}
, example_format: '<|im_start|>system
You are a helpful assistant<|im_end|>
<|im_start|>user
Hello<|im_end|>
<|im_start|>assistant
Hi there<|im_end|>
<|im_start|>user
How are you?<|im_end|>
<|im_start|>assistant
'
main: server is listening on http://127.0.0.1:8080 - starting the main loop
srv  update_slots: all slots are idle
srv    operator(): operator(): cleaning up before exit...
